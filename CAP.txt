В CAP говорится, что в распределенной системе возможно выбрать только 2 из 3-х свойств:

C (consistency) — согласованность. Каждое чтение даст вам самую последнюю запись.
A (availability) — доступность. Каждый узел (не упавший) всегда успешно выполняет запросы (на чтение и запись).
P (partition tolerance) — устойчивость к распределению. Даже если между узлами нет связи, они продолжают работать независимо друг от друга.
	
	А
       /\            AC - реляционные
      /  \           AP - Cassandra
     /    \          CP - MongoDb, Redis
    /______\ 
   C        P

* Postgresql

Следующие пункты относятся к абстрактной распределенной БД Postgresql.

Репликация Master-Slave — одно из распространенных решений
Синхронизация с Master в асинхронном / синхронном режиме
Система транзакций использует двухфазный коммит для обеспечения consistency
Если возникает partition, вы не можете взаимодейстовать с системой (в основном случае)

Таким образом, система не может продолжать работу в случае partition, но обеспечивает strong consistency и availability. Это система CA!

* MongoDB

Следующие пункты относятся к абстрактной распределенной БД MongoDB.

MongoDB обеспечивает strong consistency, потому что это система с одним Master узлом, и все записи идут по умолчанию в него.
Автоматическая смена мастера, в случае отделения его от остальных узлов.
В случае разделения сети, система прекратит принимать записи до тех пор, пока не убедится, что может безопасно завершить их.

Таким образом, система может продолжать работу в случае разделения сети, но теряется CAP-availability всех узлов. Это CP система!

* Cassandra

Cassandra использует схему репликации master-master, что фактически означает AP систему, в которой разделение сети приводит к самодостаточному функционированию всех узлов.

---------------------------------------------------------------------------------------
На самом деле : 
Postgresql

Postgresql действительно допускает множество различных конфигураций системы, поэтому их очень сложно описать. Давайте просто возьмем классическую Master-Slave репликацию с реализацией через Slony.

Система работает в соответствии с ACID (существует пара проблем с двухфазным коммитом, но это вне рамок статьи).
В случае разрыва связи, Slony попытается переключиться на новый Master, и у нас есть новый мастер с его согласованностью.
Когда система функционирует в нормальном режиме, Slony делает все, чтобы достичь strong consistency. На самом деле, ACID — причина большой задержки в этой системе.
Классификация системы — PC / EC (A).

MongoDB

Давайте узнаем что-то новое о MongoDB:

Это ACID в ограниченном смысле на уровне документа.
В случае распределенной системы — it's all about that BASE.
В случае отсутствия разделений сети, система гарантирует, что чтение и запись будут согласованными.
Если Master узел упадёт или потеряет связь с остальной системой, некоторые данные не будут реплицированы. Система выберет нового мастера, чтобы оставаться доступной для чтения и записи. (Новый мастер и старый мастер несогласованы).
Система рассматривается как PA / EC (A), так как большинство узлов остаются CAP-available в случае разрыва. Помните, что в CAP MongoDB обычно рассматривается как CP. Создателль PACELC, Даниэль Дж. Абади, говорит, что существует гораздо больше проблем с согласованностью, чем с доступностью, поэтому PA.

Cassandra

Предназначена для «скоростного» взаимодействия (low-latency interactions).
ACID на уровне записи.
В случае распределенной системы — it's all about that BASE.
Если возникает разрыв связи, остальные узлы продолжают функционировать.
В случае нормального функционирования — система использует уровни согласованности для уменьшения задержки.
Система рассматривается как PA / EL (A).