Интернет построен на основе коммутации пакетов.

С какой-то точки зрения это может звучать безумно, 
но по сути в Интернете нет какого-то главного «координатора», 
который бы решал, по какому пути каждый пакет должен идти. 
Наш компьютер просто «бросает» пакет в сеть, и все устройства, 
через которые он проходит, пытаются решить, 
какой путь для этого пакета будет наиболее оптимальным. 
Удивительно, но в большинстве случаев, у этих устройств 
получается достигнуть поставленной цели. Всё благодаря протоколам!

Нам нужно отправить шоколадку с фабрики конечному получателю.
Процесс оборачивания-разворачивания шоколадки – ровно то, как работают протоколы в Интернете:

История OSI (Open Systems Interconnection) и TCP/IP.

Так сложилось, что есть две модели, описывающие уровни протоколов.
Одна из них теоретическая – модель OSI, а другая практическая – TCP/IP.
Приложение создало сообщение -> нужно передать его на транспортный уровень
- К нему добавляется TCP или UDP заголовок. Полученное - называется *датаграммой или *сегментом.
TCP-header + message
- Далее передается на межсетевой уровень, добавляем IP заголовок. Это называем пакетом:
Ip-header + TCP-header + message

Наконец, пакет передаётся на канальный уровень, где кодируется и уходит по проводам
в сторону точки назначения. Протоколы на этом уровне так же добавляют свой заголовок
в каждый пакет, и в результате получается кадр (или «фрейм» – пер.).

Ethernat-header + Ip-header + TCP-header + message + Ethernet footer

Когда кадр передаётся от одного промежуточного узла сети к другому, 
эти узлы разбирают кадр на части, проверяют IP-заголовок пакета, 
определяют что с ним делать, а затем создают новый кадр для этого пакета и передают его следующему узлу.


Кадры обычно содержат не только заголовок, но и окончание. Например, Ethernet-кадр для нашего сообщения может выглядеть примерно так:


Протокол работает на основе TCP/IP порт 80.
TCP/IP не является обязательным, он остается предпочтительным, 
так как берет на себя разбиение и сборку сообщений на себя и не «напрягает» ни браузер, ни сервер.
* URL 
-Протокол;
-Хост;
-Порт;
-Каталок ресурса;
-Метки (Запрос).

* Методы HTTP
Метод/Описание
HEAD/Прочитать заголовок веб-страницы
GET/Прочитать веб-страницу
POST/Добавить к веб-странице
PUT/Сохранить веб-страницу
TRACE/Отослать назад запрос
DELETE/Удалить веб-страницу
OPTIONS/Отобразить параметры
CONNECT/Зарезервировано для будущего использования

* Группы кодов состояния

1хх: Готовность сервера, Код 100 – сервер готов обрабатывать запросы клиента;

2хх: Успех.

Код 200 – запрос обработан успешно;
Код  204 – Содержимого нет.
3хх: Перенаправление.

Код 301 – Запрашиваемая страница перенесена;
Код 304 – Страница в КЭШе еще актуальна.
4хх: Ошибка клиента.

Код 403 – Ошибка доступа;
Код 404 – Страница не найдена.
5хх: Ошибки сервера

Код 500 – Ошибка сервера внутренняя;
Код 503 – Предпринять попытку запроса позже.

